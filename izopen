#!/bin/sh
# multi protocol bash script to auto opening given URI and auto creating ssh reverse tunnel socks proxy
# very useful to use KeePassX as secure URI launcher
# Written by Ugo Viti <ugo.viti@initzero.it>
#    date: 20160118
# version: 2.0

# features:
#    URI handling of: ssh, rdp, vnc, sftp, ftp, http, https, smb and cifs protocols

# installation:
#        simply copy this script into a user or system wide bin directory (suggestion: cp izopen ~/bin), must be into a PATH variable

# usage: izopen uri://username:password@hostname:port

# examples:
#        izopen http://www.example.com
#        izopen http://john:doe@www.example.com
#        izopen ssh://root:supersecurepassword@www.example.com
#        izopen smb://Administrator:password@server
#        izopen rdp://DOMAIN/Administrator:password@server

# KeePassX 0.x integration:
#        into advanded settings of keepassx select "Custom Browser Command" and insert:
#        izopen %1
#        for every account stored into your database, write into URL field: uri://{USERNAME}:{PASSWORD}@host:port
#        example: rdp://{USERNAME}:{PASSWORD}@www.example.com:3389

# KeePassX 2.x integration (Fedora >= 23):
#        dnf install -y zenity kdelibs3 proxychains-ng keepassx


# variables
#########################################################################
debug=1				# enable script debug

helper_http_chrome=1		# use google chrome as web browser (this needed because proxychains doens't works with google chrome)

tunnel_create_force=1		# always create the tunnel for every new ssh connection
tunnel_use_force=1		# always use the tunnel for every opened url
tunnel_use_force_ssh=0		# always use the tunnel if connecting via ssh

izopen_tmp="$HOME/.config/izopen"
izopen_tmp_socks_all="$izopen_tmp/socks_all.conf"
izopen_tmp_socks_last="$izopen_tmp/socks_last.conf"
tunnel_ports_start=2000

[ -f "/tmp/izopen.conf" ] && . /tmp/izopen.conf

# commands helper functions
#########################################################################
helper_ssh() {
  helper_cmd_terminal="mate-terminal"
  #helper_cmd_terminal="terminator"
  #helper_cmd_terminal="gnome-terminal"
  #helper_cmd_terminal="konsole"
  #helper_cmd_terminal="xfce4-terminal"

  [ -z "$username" ] && read -p "username: " username;
  #[ -z "$password" ] && read -p "password: " password;
  
  helper_cmd_opts="$helper_cmd_opts -C $([ -n "$port" ] && echo "-p $port") $username@$host $opts"

  # set the final command
  helper_cmd="$helper_cmd_terminal -e \"ssh $helper_cmd_opts\" --title \"$([ "$tunnel_create" = 1 ] && echo "$host Tunnel: $tunnel_port_create" || echo "$host")\""

  ####################### 
  # test colorized prompt
  #helper_cmd="gnome-terminal -e \"ssh $([ -n "$port" ] && echo "-p $port") $username@$host $opts\""
  #helper_cmd_ssh_opts="-t \"export PS1='\e[0;31m[\u@\h \W]\$ \e[m '; exec bash\""
}


helper_rdp() {
  # extract domain from username and convert to the right name
  domain="$(echo "$username" | awk -F"/" '{print $1}')"
  username="$(echo "$username" | awk -F"/" '{print $2}')"
  password="$(echo "$password" | sed 's/\%25/\%/g')" # % key workaround
  [ -z "$username" ] && username=$domain && unset domain
  #username="$(echo "$username" | sed 's/\//\\\\/g')"
  #helper_cmd="rdesktop -k it -g 1024x720 $opts $([ -n "$domain" ] && echo "-d \"$domain\"") $([ -n "$username" ] && echo "-u \"$username\"")  $([ -n "$password" ] && echo "-p \"$password\"") $host$([ -n "$port" ] && echo ":$port")"
  helper_cmd="rdesktop -k it -g 1280x780 $opts $([ -n "$domain" ] && echo "-d \"$domain\"") $([ -n "$username" ] && echo "-u \"$username\"")  $([ -n "$password" ] && echo "-p \"$password\"") $host$([ -n "$port" ] && echo ":$port")"
}

helper_vnc() {
  # vnc doesn't support username and actually don't accept the password. use the gnome keyring instead for this
  helper_cmd="vinagre $protocol://$host$([ -n $port ] && echo ":$port")"
}

helper_sftp() {
  helper_cmd="xdg-open \"$args\""
}

helper_ftp() {
  helper_cmd="xdg-open \"$args\""
}

helper_http() {
  if [ "$tunnel_use" = 1 ] 
    then
	if [ $helper_http_chrome = 1 ] ; then
	  helper_cmd="google-chrome --disable-gpu --restore-last-session --no-first-run --disable-translate --password-store=basic --user-data-dir=\"$izopen_tmp/google-chrome-$tunnel_port_use\" --proxy-server=\"socks5://localhost:$tunnel_port_use\" \"$args\""
	else
	  helper_cmd="midori -c \"$izopen_tmp/midori-$tunnel_port_use\" \"$args\""
	fi
    else
	helper_cmd="xdg-open \"$args\""
  fi
}

helper_https() {
	helper_http "$args"
}

helper_about() {
	helper_http "$args"
}

helper_smb() {
  helper_cmd="xdg-open \"$args\""
}

helper_cifs() {
  helper_cmd="xdg-open \"$args\""
}


# SYSTEM FUNCTIONS
# DON'T TOUCH ANYTHING BELLOW
#########################################################################

helper_tunnel_create() {
 # put specific host port forwarding port config file
 izopen_tmp_socks_host="$izopen_tmp/socks_host_$(echo $host | sed -e 's/[^A-Za-z0-9_-]/_/g').conf"

 # don't create a new tunnel if it's already opened
 if [ -f "$izopen_tmp_socks_host" ]
  then
	nc 127.0.0.1 $(cat "$izopen_tmp_socks_host") </dev/null 2>/dev/null
	[ $? != 0 ] && tunnel_create=1 || tunnel_create=0
 fi
 if [ "$tunnel_create" = 1 ]
  then
	  if   [ ! -e "$izopen_tmp_socks_all" ] ; then
		mkdir -p "$izopen_tmp"
		tunnel_port_create=$tunnel_ports_start
		echo $tunnel_port_create > "$izopen_tmp_socks_all"
	  elif [ -e "$izopen_tmp_socks_host" ] ; then 
		tunnel_port_create="$(cat "$izopen_tmp_socks_host")"
	  elif [ -e "$izopen_tmp_socks_all" ] ; then
		let tunnel_port_create="$(cat "$izopen_tmp_socks_all")+1"
		echo $tunnel_port_create > "$izopen_tmp_socks_all"
	  fi

	  # save the current host used port
	  echo $tunnel_port_create > "$izopen_tmp_socks_host"

	  # save the last used/reused port
	  echo $tunnel_port_create > "$izopen_tmp_socks_last"

	  # dynamic port forwarding with compression
	  # add ssh options to create socks tunnel and compression
	  helper_cmd_opts="-D $tunnel_port_create"
 fi
}

helper_tunnel() {
 tunnel_ports_all="$(cat $izopen_tmp_socks_all 2>/dev/null)"
 tunnel_ports_last="$(cat $izopen_tmp_socks_last 2>/dev/null)"
 [ -z "$tunnel_ports_all" ] && tunnel_ports_all=2999
 [ -z "$tunnel_ports_last" ] && tunnel_ports_last=$tunnel_ports_start

 # don't use tunnel if the protocol is ssh and is not forced
 [[ "$protocol" = "ssh" && "$tunnel_use_force_ssh" = 0 ]] && tunnel_use=0

 # create the ssh tunnel if the url is ssh://
 [ "$protocol" = "ssh" ] && helper_tunnel_create

 # ask for a port if we want use a tunnel
 [ $tunnel_use = 1 ] && tunnel_port_use=$(zenity --entry --entry-text=$tunnel_ports_last --text="Inserire la porta del Proxy Socks\nCompresa fra $tunnel_ports_start e $tunnel_ports_all\n" 2>/dev/null)

 # debug
 #echo tunnel_create=$tunnel_create
 #echo tunnel_use=$tunnel_use
 #echo tunnel_port_use="$tunnel_port_use"

 # create the proxychains4 config
 if [[ ! -z $tunnel_port_use && $tunnel_port_use =~ ^-?[0-9]+$ && $tunnel_port_use -ge $tunnel_ports_start && $tunnel_port_use -le 2999 ]]
  then
        # proxychains configuration
	izopen_tmp_socks_proxy="$izopen_tmp/proxychains.$tunnel_port_use.conf"
        echo -e "strict_chain\nquiet_mode\nproxy_dns\n[ProxyList]\nsocks5  127.0.0.1 $tunnel_port_use" > "$izopen_tmp_socks_proxy"
        helper_cmd_prepend="proxychains4 -f $izopen_tmp_socks_proxy"
  else
    [ ! -z $tunnel_port_use ] && zenity --error --text="La porta specificata non Ã¨ valida: $tunnel_port_use\n\nInserire una porta compresa fra $tunnel_ports_start e $tunnel_ports_all" 2>/dev/null && unset tunnel_port_use
 fi

 # don't use tunnel socks proxy if the port is not specified or wrong
 [ -z $tunnel_port_use ] && tunnel_use=0
}

open_uri() {
  local uri="$1"
  local args="$@"
  shift
  local opts="$@"
  parse_uri "$(echo $uri | sed s/\*/\\\WILDCARD/g)"


  ##
  ## customize the following uri for command associations:
  ##
  case ${protocol} in
        ssh|rdp|vnc|sftp|ftp|http|https|about|smb|cifs)
		# create or use ssh tunnel if required
		[[ "$tunnel_create" = 1 || "$tunnel_use" = 1 ]] && helper_tunnel "$args"
		# obtain commands to use to connect
		helper_${protocol} "$args"
		# because google chrome doesn't works with proxychains, I don't use it
		if [[ "$protocol" = "http" && $helper_http_chrome = 1 ]]; then
		  helper_cmd="$helper_cmd"
		else
		  helper_cmd="$helper_cmd_prepend $helper_cmd"
		fi
		# connect to remote server
		eval "$helper_cmd"
		;;
        *)
		echo "ERROR: invalid URI specified: $args"
		;;
  esac

  if [ $debug = 1 ]; then
	# print the parsed fields
	echo "========================================================================================"
	echo "$(date +"%Y-%m-%d %H:%M:%S %Z") [debug]: $0 $args"
	echo "----------------------------------------------------------------------------------------"
	echo "       uri: $uri"
	echo "  protocol: $protocol"
	echo "  username: $username"
	echo "  password: $password"
	echo "      host: $host"
	echo "      port: $port"
	echo "      path: $path"
	echo "   uri tmp: $uritmp"
	echo "helper cmd: $helper_cmd"
	echo "========================================================================================"
  fi #> /tmp/izopen.log
}


#      desc: set/check/sanitize/validate a URI and the gained variables
#      args: $1
# args desc: 'URI'
#    return: misc variables containing the URI data
parse_uri() {
  #      desc: set in the uritmp variable the URI given
  #      args: $1
  # args desc: 'URI'
  #    return: none
  parse_uri_set_uritmp() {
        uritmp="$(echo ${uritmp} | awk -F "$1" '{print $2}')"
  }

  #      desc: check if the uri contain invalid character
  #      args: $1
  # args desc: 'URI'
  #    return: print the sanitized version of the given uri
  parse_uri_check_uri() {
        echo $1 | tr -d [:alnum:] | tr -d "." | tr -d "-" | tr -d "_" | tr -d ":" | tr -d "/" | tr -d "@" | tr -d "$" | tr -d "~"
  }

  #      desc: check if the host contain invalid characters and print a sanitized version
  #      args: $1
  # args desc: 'URI'
  #    return: print the sanitized hostname given
  parse_uri_check_host() {
        echo $1 | tr -d [:alnum:] | tr -d "." | tr -d "-" | tr -d ":" | tr -d "/"
  }

  #      desc: unset all used variables by parse_uri function
  #      args: none
  # args desc: none
  #    return: none
  parse_uri_unset_variables() {
        unset protocol username password host port path
  }

  # copy to uritmp variable the given URI string
  local uritmp=$1

  # assure that doesn't exist already variables used by this function
  parse_uri_unset_variables

  # set the standard RFC URI delimiters
  local uri_delimiter="://"
  local username_delimiter="@"
  local password_delimiter=":"
  local port_delimiter=":"
  local path_delimiter="/"

  # return 0 if no uri is passed to this function
  [ -z "$(echo ${uritmp})" ] && parse_uri_unset_variables && return 0
  # return 1 if the uri doesn't contain the standard uri delimiter
  [ -z "$(echo ${uritmp} | grep ${uri_delimiter})" ] && parse_uri_unset_variables && return 1

  # set the used protocol
  protocol="$(echo ${uritmp} | awk -F "${uri_delimiter}" '{print $1}')" ; parse_uri_set_uritmp "${protocol}${uri_delimiter}"

  # file:// uri workaround
  # because this special uri doesn't contain a host declaration, modify the uri before parsing it
  [ "${protocol}" = "file" ] && uritmp="localhost/${uritmp}"

  # check if the server uri contain a username or password
  if [ -n "$(echo ${uritmp} | grep "${username_delimiter}")" ]
    then
      username="$(echo ${uritmp} | sed "s/${username_delimiter}.*//g")" ; parse_uri_set_uritmp "${username}${username_delimiter}"

      # check if the uri contain the password
      if [ -n "$(echo "${username}" | grep "${password_delimiter}")" ]
        then
          password="$(echo "${username}" | awk -F "${password_delimiter}" '{print $2}' | sed s/WILDCARD/\\\*/g)"
          username="$(echo "${username}" | awk -F "${password_delimiter}" '{print $1}')"
          # normalize password if problematic characters are found
          #password="$(echo "${password}" | sed s/\!/\\"\!"/g | sed s/\'/\\"\'"/g | sed s/\*/\\"\*"/g)"
          # convert %3E to >
          #password="$(echo "${password}" | sed s/\%3E/\>/g)"
      fi

      # stop if no username is set, like wrong written uri with multiple "@" or ":" 
      [ -z "${username}" ] && parse_uri_unset_variables && return 1
  fi

  # stop if the uri contain invalid caracters
  [ -n "$(parse_uri_check_uri "${uritmp}")" ] && parse_uri_unset_variables && return 1

  # check if the uri contain a port number
  if [ -n "$(echo ${uritmp} | grep "${port_delimiter}")" ]
    then
     host="$(echo ${uritmp} | awk -F "${port_delimiter}" '{print $1}')" ; parse_uri_set_uritmp "${host}"
     port="$(echo ${uritmp} | awk -F "${port_delimiter}" '{print $2}' | awk -F "${path_delimiter}" '{print $1}')" ; parse_uri_set_uritmp "${port_delimiter}${port}${path_delimiter}"
     path="$(echo ${uritmp})" ; parse_uri_set_uritmp "${path}"
    else
     host="$(echo ${uritmp} | sed 's/^\/*//g' | awk -F "${path_delimiter}" '{print $1}')" ; parse_uri_set_uritmp "${host}${path_delimiter}"
     path="$(echo ${uritmp})" ; parse_uri_set_uritmp "${path}"
  fi

  # stop if the host contain invalid caracters
  [ -n "$(parse_uri_check_host "${host}")" ] && parse_uri_unset_variables && return 1

  # hide the user password in the uri variable
  if   [[ -n "${password}" && -n "${port}" ]]
    then
     uri="${protocol}${uri_delimiter}${username}${password_delimiter}xxxxxxxx${username_delimiter}${host}${port_delimiter}${port}${path_delimiter}${path}"
  elif [[ -n "${password}" && -z "${port}" ]]
    then
     uri="${protocol}${uri_delimiter}${username}${password_delimiter}xxxxxxxx${username_delimiter}${host}${path_delimiter}${path}"
  elif [ -z "${password}" ]
    then
     uri=$1
  fi

  unset uritmp
}

case $1 in 
  switch)
	[ -f "/tmp/izopen.conf" ] && . /tmp/izopen.conf
	[ "$tunnel_use_force_ssh" = "0" ] && echo "tunnel_use_force_ssh=1" > /tmp/izopen.conf || echo "tunnel_use_force_ssh=0" > /tmp/izopen.conf
	;;
  tunnel)
	shift
	tunnel_create=1
	tunnel_use=1
	open_uri "$@"
	;;
  clean)
	rm -f "$izopen_tmp"/*.conf
	;;

       *)
	[ $tunnel_create_force = 1 ] && tunnel_create=1
	[ $tunnel_use_force = 1 ] && tunnel_use=1
	open_uri "$@"
	;;
esac

